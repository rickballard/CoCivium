name: quiet-monitor
on:
  schedule:
    - cron: "0 * * * *"   # hourly
  workflow_dispatch:
    inputs:
      force_alert:
        description: "Post a test alert even if nothing is found"
        required: false
        default: "false"
permissions:
  contents: read
  issues: write

jobs:
  scan:
    runs-on: ubuntu-latest
    env:
      REPO: ${{ github.repository }}
      LOOKBACK_MIN: 120
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      FORCE_ALERT: ${{ github.event.inputs.force_alert }}
    steps:
      - name: Checks 1–3 and alert if needed
        shell: bash
        run: |
          set -euo pipefail
          cutoff=$(date -u -d "$LOOKBACK_MIN minutes ago" +"%Y-%m-%dT%H:%M:%SZ")

          # 1) GitHub Actions (completed with bad conclusions)
          runs=$(gh run list -R "$REPO" --status completed --limit 50 \
                 --json name,number,headSha,url,conclusion,updatedAt \
                 | jq -c ".[] | select((.conclusion|IN(\"failure\",\"timed_out\",\"cancelled\",\"action_required\",\"stale\")) and (.updatedAt >= \"$cutoff\"))")
          wf_lines=$(echo "$runs" | jq -r '"- \(.name) — run #\(.number), **\(.conclusion)**, `\(.headSha|.[:7])` · \(.url)"' || true)

          # 2) Issues/PRs with urgent labels, updated in window
          labels='urgent p0 sev1 blocker'
          orLabels=$(printf 'label:%s OR ' $labels | sed 's/ OR $//')
          issueq="is:issue is:open updated:>=$LOOKBACK_MINm ($orLabels)"
          prq="is:pr is:open updated:>=$LOOKBACK_MINm ($orLabels)"

          issues=$(gh issue list -R "$REPO" --search "$issueq" --limit 50 --json number,title,labels,url,updatedAt | jq -c '.[]')
          prs=$(gh pr list -R "$REPO" --search "$prq" --limit 50 --json number,title,labels,url,updatedAt | jq -c '.[]')

          issue_lines=$(echo "$issues" | jq -r '"- Issue #\(.number): \(.title) · [link](\(.url)) · labels: \([.labels[].name]|join(","))"' || true)
          pr_lines=$(echo "$prs" | jq -r '"- PR #\(.number): \(.title) · [link](\(.url)) · labels: \([.labels[].name]|join(","))"' || true)

          # 3) Discussions: new posts/comments by others in window
          posts=$(gh api -H "Accept: application/vnd.github+json" "repos/$REPO/discussions?per_page=50")
          post_lines=$(echo "$posts" | jq -r --arg cutoff "$cutoff" '
            [.[] | select(.created_at >= $cutoff and .user.login != "rickballard")
              | "- post #\(.number) by **\(.user.login)**: \(.title) · \(.html_url)"] | .[]' || true)

          comment_lines=""
          for num in $(echo "$posts" | jq -r '.[].number'); do
            cs=$(gh api -H "Accept: application/vnd.github+json" "repos/$REPO/discussions/$num/comments?per_page=100")
            cl=$(echo "$cs" | jq -r --arg cutoff "$cutoff" '
               [.[] | select(.created_at >= $cutoff and .user.login != "rickballard")
                 | "- comment on discussion #\(.discussion_number) by **\(.user.login)** · \(.html_url)"] | .[]' || true)
            comment_lines="${comment_lines}"$'\n'"${cl}"
          done

          report=""
          [ -n "${wf_lines:-}" ] && report+=$'### 1) GitHub Actions needing attention\n'"$wf_lines"$'\n\n'
          attn=""
          [ -n "${issue_lines:-}" ] && attn+="$issue_lines"$'\n'
          [ -n "${pr_lines:-}" ] && attn+="$pr_lines"
          [ -n "$attn" ] && report+=$'### 2) Issues/PRs w/ urgent labels\n'"$attn"$'\n\n'
          if [ -n "${post_lines:-}" ] || [ -n "${comment_lines// /}" ]; then
            report+=$'### 3) Discussions (new by others)\n'"${post_lines}"$'\n'"${comment_lines}"$'\n\n'
          fi

          if [ "${FORCE_ALERT:-false}" = "true" ]; then
            report=$'### (Test) Forced alert\nThis is a manual test via workflow_dispatch.\n\n'"$report"
          fi

          if [ -z "$report" ]; then
            echo "All clear within $LOOKBACK_MIN minutes; no alert posted."
            exit 0
          fi

          ts=$(date -u +"%Y-%m-%d %H:%M UTC")
          body=$'# Quiet Monitor Alert — '"$ts"$'\n\n'"$report"$'\n\n@rickballard'
          inbox=$(gh issue list -R "$REPO" --search "in:title \"Ops Alert Inbox\"" --state open --json number --jq '.[0].number' || true)
          if [ -z "$inbox" ]; then
            inbox=$(gh issue create -R "$REPO" -t "Ops Alert Inbox" -b "Central thread for Quiet Monitor alerts." -l "ops,monitor" --json number --jq '.number')
          fi
          gh issue comment -R "$REPO" "$inbox" -b "$body"
          echo "Alert posted to issue #$inbox"